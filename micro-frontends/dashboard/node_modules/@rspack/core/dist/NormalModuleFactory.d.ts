import { AsyncSeriesBailHook, HookMap } from "tapable";
import type * as binding from "@rspack/binding";
type ResourceData = {
    resource: string;
    path: string;
    query?: string;
    fragment?: string;
};
type ResourceDataWithData = ResourceData & {
    data?: Record<string, any>;
};
type ResolveData = {
    context?: string;
    request: string;
    fileDependencies: string[];
    missingDependencies: string[];
    contextDependencies: string[];
};
type CreateModuleData = binding.CreateModuleData & {
    settings: {};
    matchResource: string;
};
export declare class NormalModuleFactory {
    hooks: {
        resolveForScheme: HookMap<AsyncSeriesBailHook<[ResourceDataWithData], true | void>>;
        beforeResolve: AsyncSeriesBailHook<[ResolveData], boolean | void>;
        afterResolve: AsyncSeriesBailHook<[ResolveData], boolean | void>;
        createModule: AsyncSeriesBailHook<[CreateModuleData, {}], void>;
    };
    constructor();
}
export {};
//# sourceMappingURL=NormalModuleFactory.d.ts.map