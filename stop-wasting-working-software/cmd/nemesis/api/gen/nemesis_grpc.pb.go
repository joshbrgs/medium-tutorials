// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: nemesis.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NemesisService_CreateNemesis_FullMethodName = "/nemesis.NemesisService/CreateNemesis"
	NemesisService_GetNemesis_FullMethodName    = "/nemesis.NemesisService/GetNemesis"
	NemesisService_UpdateNemesis_FullMethodName = "/nemesis.NemesisService/UpdateNemesis"
	NemesisService_DeleteNemesis_FullMethodName = "/nemesis.NemesisService/DeleteNemesis"
	NemesisService_ListNemeses_FullMethodName   = "/nemesis.NemesisService/ListNemeses"
)

// NemesisServiceClient is the client API for NemesisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NemesisServiceClient interface {
	CreateNemesis(ctx context.Context, in *CreateNemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error)
	GetNemesis(ctx context.Context, in *GetNemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error)
	UpdateNemesis(ctx context.Context, in *UpdateNemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error)
	DeleteNemesis(ctx context.Context, in *DeleteNemesisRequest, opts ...grpc.CallOption) (*DeleteNemesisResponse, error)
	ListNemeses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNemesesResponse, error)
}

type nemesisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNemesisServiceClient(cc grpc.ClientConnInterface) NemesisServiceClient {
	return &nemesisServiceClient{cc}
}

func (c *nemesisServiceClient) CreateNemesis(ctx context.Context, in *CreateNemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NemesisResponse)
	err := c.cc.Invoke(ctx, NemesisService_CreateNemesis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemesisServiceClient) GetNemesis(ctx context.Context, in *GetNemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NemesisResponse)
	err := c.cc.Invoke(ctx, NemesisService_GetNemesis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemesisServiceClient) UpdateNemesis(ctx context.Context, in *UpdateNemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NemesisResponse)
	err := c.cc.Invoke(ctx, NemesisService_UpdateNemesis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemesisServiceClient) DeleteNemesis(ctx context.Context, in *DeleteNemesisRequest, opts ...grpc.CallOption) (*DeleteNemesisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNemesisResponse)
	err := c.cc.Invoke(ctx, NemesisService_DeleteNemesis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemesisServiceClient) ListNemeses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNemesesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNemesesResponse)
	err := c.cc.Invoke(ctx, NemesisService_ListNemeses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NemesisServiceServer is the server API for NemesisService service.
// All implementations must embed UnimplementedNemesisServiceServer
// for forward compatibility.
type NemesisServiceServer interface {
	CreateNemesis(context.Context, *CreateNemesisRequest) (*NemesisResponse, error)
	GetNemesis(context.Context, *GetNemesisRequest) (*NemesisResponse, error)
	UpdateNemesis(context.Context, *UpdateNemesisRequest) (*NemesisResponse, error)
	DeleteNemesis(context.Context, *DeleteNemesisRequest) (*DeleteNemesisResponse, error)
	ListNemeses(context.Context, *Empty) (*ListNemesesResponse, error)
	mustEmbedUnimplementedNemesisServiceServer()
}

// UnimplementedNemesisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNemesisServiceServer struct{}

func (UnimplementedNemesisServiceServer) CreateNemesis(context.Context, *CreateNemesisRequest) (*NemesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNemesis not implemented")
}
func (UnimplementedNemesisServiceServer) GetNemesis(context.Context, *GetNemesisRequest) (*NemesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNemesis not implemented")
}
func (UnimplementedNemesisServiceServer) UpdateNemesis(context.Context, *UpdateNemesisRequest) (*NemesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNemesis not implemented")
}
func (UnimplementedNemesisServiceServer) DeleteNemesis(context.Context, *DeleteNemesisRequest) (*DeleteNemesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNemesis not implemented")
}
func (UnimplementedNemesisServiceServer) ListNemeses(context.Context, *Empty) (*ListNemesesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNemeses not implemented")
}
func (UnimplementedNemesisServiceServer) mustEmbedUnimplementedNemesisServiceServer() {}
func (UnimplementedNemesisServiceServer) testEmbeddedByValue()                        {}

// UnsafeNemesisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NemesisServiceServer will
// result in compilation errors.
type UnsafeNemesisServiceServer interface {
	mustEmbedUnimplementedNemesisServiceServer()
}

func RegisterNemesisServiceServer(s grpc.ServiceRegistrar, srv NemesisServiceServer) {
	// If the following call pancis, it indicates UnimplementedNemesisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NemesisService_ServiceDesc, srv)
}

func _NemesisService_CreateNemesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNemesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemesisServiceServer).CreateNemesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NemesisService_CreateNemesis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemesisServiceServer).CreateNemesis(ctx, req.(*CreateNemesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NemesisService_GetNemesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNemesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemesisServiceServer).GetNemesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NemesisService_GetNemesis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemesisServiceServer).GetNemesis(ctx, req.(*GetNemesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NemesisService_UpdateNemesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNemesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemesisServiceServer).UpdateNemesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NemesisService_UpdateNemesis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemesisServiceServer).UpdateNemesis(ctx, req.(*UpdateNemesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NemesisService_DeleteNemesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNemesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemesisServiceServer).DeleteNemesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NemesisService_DeleteNemesis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemesisServiceServer).DeleteNemesis(ctx, req.(*DeleteNemesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NemesisService_ListNemeses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemesisServiceServer).ListNemeses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NemesisService_ListNemeses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemesisServiceServer).ListNemeses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NemesisService_ServiceDesc is the grpc.ServiceDesc for NemesisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NemesisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nemesis.NemesisService",
	HandlerType: (*NemesisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNemesis",
			Handler:    _NemesisService_CreateNemesis_Handler,
		},
		{
			MethodName: "GetNemesis",
			Handler:    _NemesisService_GetNemesis_Handler,
		},
		{
			MethodName: "UpdateNemesis",
			Handler:    _NemesisService_UpdateNemesis_Handler,
		},
		{
			MethodName: "DeleteNemesis",
			Handler:    _NemesisService_DeleteNemesis_Handler,
		},
		{
			MethodName: "ListNemeses",
			Handler:    _NemesisService_ListNemeses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nemesis.proto",
}
