# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # notifications:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 8090:8090
  #
  #   # The commented out section below is an example of how to define a PostgreSQL
  #   # database that your application can use. `depends_on` tells Docker Compose to
  #   # start the database before your application. The `db-data` volume persists the
  #   # database data between container restarts. The `db-password` secret is used
  #   # to set the database password. You must create `db/password.txt` and add
  #   # a password of your choosing to it before running `docker compose up`.
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # auth:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 9000:9000
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # users:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 8081:8081
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # nemesis:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 8070:8070
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # makers:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 8050:8050
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # destroyers:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 8040:8040
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # readers:
  #   build:
  #     context: .
  #     target: final
  #   ports:
  #     - 8060:8060
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #
  rabbitMq:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - bad_inc_net

  traefik:
    image: "traefik:v2.11"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - bad_inc_net
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: ["CMD", "pg_isready"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#
# volumes:
#   db-data:
#
# secrets:
#   db-password:
#     file: db/password.txt

networks:
  bad_inc_net:
    driver: bridge
